[{"path":"https://chop-cgtinformatics.github.io/ggswim/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ggswim authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/adding_arrows.html","id":"adding-arrows-using-geom_swim_arrow","dir":"Articles","previous_headings":"","what":"Adding arrows using geom_swim_arrow()","title":"Adding arrows to ggswim","text":"demonstrate might add arrows onto patient_data dataset, let‚Äôs take subset patient_data help us make use geom_swim_arrow(): look familiar pared-subset end_study_events without indicated label. Since filled label statuses end_study_events dataset mean subject went study, arrows applicable subjects end study status. Now let‚Äôs use geom_swim_arrow() combination geom_swim_lane() make swimmer plot:  ‚Äôve correctly assigned arrows subset patients met end study event. Note geom_swim_arrow() gives plenty control arrow head neck color, shape, even length.","code":"library(ggswim) library(ggplot2)  arrow_data <- patient_data |>   dplyr::left_join(     end_study_events |>       dplyr::select(pt_id, label),     by = \"pt_id\"   ) |>   dplyr::select(pt_id, end_time, label) |>   dplyr::filter(.by = pt_id, end_time == max(end_time)) |>   dplyr::filter(is.na(label)) |>   unique()  arrow_data #> # A tibble: 8 √ó 3 #>   pt_id end_time label #>   <chr>    <dbl> <chr> #> 1 04         9   NA    #> 2 09        12   NA    #> 3 13         2.5 NA    #> 4 14         0.9 NA    #> 5 15         0.9 NA    #> 6 17         2.8 NA    #> 7 18         3.3 NA    #> 8 19         6   NA patient_data |>   ggplot() +   geom_swim_lane(     mapping = aes(       x = start_time, xend = end_time, y = pt_id,       color = disease_assessment     ),     linewidth = 5   ) +   geom_swim_arrow(     data = arrow_data,     mapping = aes(xend = end_time, y = pt_id),     arrow_neck_length = 5,     arrow_colour = \"firebrick\",     arrow_fill = \"gold\"   )"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/gallery.html","id":"random-data-sets","dir":"Articles","previous_headings":"","what":"Random Data Sets","title":"Gallery","text":"example, ‚Äôll set random data reproducibility defining dataframes lanes markers. ‚Äôll call dataframes appropriate swim marker geom functions:","code":"set.seed(123) lane_data <- tibble(   x = 0,   xend = sample(5:20, 30, replace = TRUE),   y = factor(rep(1:15, each = 2)),   colour = sample(c(\"red\", \"blue\", \"green\", \"yellow\", \"purple\"), 30, replace = TRUE) )  set.seed(123) marker_data <- tibble(   x = sample(5:20, 30, replace = TRUE),   y = factor(rep(1:15, each = 2)),   label = sample(c(\"A\", \"B\", \"C\", \"D\", \"E\"), 30, replace = TRUE),   glyph = NA ) |>   mutate(     glyph = dplyr::case_when(       label == \"A\" ~ \"üòä\",       label == \"B\" ~ \"üéâ\",       label == \"C\" ~ \"‚úÖ\",       label == \"D\" ~ \"üí•\",       label == \"E\" ~ \"‚ú®\",       .default = NA     )   ) ggplot() +   geom_swim_lane(     data = lane_data,     aes(x = x, xend = xend, y = y, colour = colour),     linewidth = 3   ) +   geom_swim_marker(     data = marker_data,     aes(x = x, y = y, marker = label),     size = 8   ) +   scale_colour_brewer(name = \"Lanes\", palette = \"Set1\") +   with(     marker_data,     scale_marker_discrete(glyphs = glyph, limits = label, name = \"Markers\")   ) +   labs(     title = \"Sample Swimmer Plot\",     x = \"Time\", y = \"Record ID\"   ) +   theme_ggswim()"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/gallery.html","id":"using-fontawesome-icons","dir":"Articles","previous_headings":"","what":"Using FontAwesome Icons","title":"Gallery","text":"Next, ‚Äôll replace emojis calls fontawesome() icons:  sure specify appropriate family argument geom_swim_marker(). FontAwesome following available: ‚ÄúFontAwesome-Solid‚Äù ‚ÄúFontAwesome-Regular‚Äù ‚ÄúFontAwesome-Brands‚Äù can use search_fontawesome() check icons available use. ggswim supports FontAwesome free icons open source license.","code":"marker_data <- marker_data |>    mutate(     glyph = dplyr::case_when(       label == \"A\" ~ fontawesome(\"fa-car\"),       label == \"B\" ~ fontawesome(\"fa-check\"),       label == \"C\" ~ fontawesome(\"fa-user\"),       label == \"D\" ~ fontawesome(\"fa-cat\"),       label == \"E\" ~ fontawesome(\"fa-dog\"),       .default = NA     )   )  ggplot() +   geom_swim_lane(     data = lane_data,     aes(x = x, xend = xend, y = y, colour = colour),     linewidth = 3   ) +   geom_swim_marker(     data = marker_data,     aes(x = x, y = y, marker = label),     size = 8, family = \"FontAwesome-Solid\"   ) +   scale_colour_brewer(name = \"Lanes\", palette = \"Set1\") +   with(     marker_data,     scale_marker_discrete(glyphs = glyph, limits = label, name = \"Markers\")   ) +   labs(     title = \"Sample Swimmer Plot\",     x = \"Time\", y = \"Record ID\"   ) +   theme_ggswim()"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/gallery.html","id":"using-bootstrap-icons","dir":"Articles","previous_headings":"","what":"Using Bootstrap Icons","title":"Gallery","text":"can similarly use Bootstrap icons bootstrap():  sure specify appropriate family argument geom_swim_marker(). Bootstrap need specify ‚ÄúBootstrap‚Äù. can use search_bootstrap() check icons available use. ggswim supports Bootstrap free icons open source license.","code":"marker_data <- marker_data |>    mutate(     glyph = dplyr::case_when(       label == \"A\" ~ bootstrap(\"bs-car-front\"),       label == \"B\" ~ bootstrap(\"bs-folder-fill\"),       label == \"C\" ~ bootstrap(\"bs-clock-fill\"),       label == \"D\" ~ bootstrap(\"bs-check-circle-fill\"),       label == \"E\" ~ bootstrap(\"bs-chat-fill\"),       .default = NA     )   )  ggplot() +   geom_swim_lane(     data = lane_data,     aes(x = x, xend = xend, y = y, colour = colour),     linewidth = 3   ) +   geom_swim_marker(     data = marker_data,     aes(x = x, y = y, marker = label),     size = 8, family = \"Bootstrap\"   ) +   scale_colour_brewer(name = \"Lanes\", palette = \"Set1\") +   with(     marker_data,     scale_marker_discrete(glyphs = glyph, limits = label, name = \"Markers\")   ) +   labs(     title = \"Sample Swimmer Plot\",     x = \"Time\", y = \"Record ID\"   ) +   theme_ggswim()"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/gallery.html","id":"themeing-with-ggswim","dir":"Articles","previous_headings":"","what":"Themeing with ggswim","title":"Gallery","text":"‚Äôll demonstrate theme functions available ggswim. examples use plot setup README, starting original output:","code":"p"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/gallery.html","id":"theme_ggswim","dir":"Articles","previous_headings":"Themeing with ggswim","what":"theme_ggswim()","title":"Gallery","text":"","code":"p + theme_ggswim()"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/gallery.html","id":"theme_ggswim_dark","dir":"Articles","previous_headings":"Themeing with ggswim","what":"theme_ggswim_dark()","title":"Gallery","text":"","code":"p + theme_ggswim_dark()"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/ggswim.html","id":"adding-a-lane-layer","dir":"Articles","previous_headings":"","what":"Adding a Lane Layer","title":"Getting Started with ggswim","text":"Let‚Äôs get started building swimmer plot! README, using ggswim‚Äôs internal datasets: patient_data, infusion_events, end_study_events. Let‚Äôs start observing patient_data‚Äôs structure: patient_data contains long dataset patient ID‚Äôs (pt_id) can repeated. rows differentiated disease_assessmentss combined corresponding start end times, representing months. Together, rows detail clinical trial timelines given patient. CR = ‚ÄúComplete Response‚Äù CRi = ‚ÄúComplete Response Incomplete Blood Count Recovery‚Äù RD = ‚ÄúRelapsed Disease‚Äù Now, let‚Äôs make plot using ggplot() first layer geom_swim_lane():  simple bar graph showing infusions grouped patients given disease assessment status. geom_swim_lane() work setting geom_segment() readying plot layers additional ggswim-specific features ‚Äúmarkers‚Äù mentioned earlier. ‚Äôs worth noting geom_swim_lane() thin wrapper around geom_segment() supports functionality apart yend since swimmer plots tend horizontal.","code":"#> # A tibble: 75 √ó 4 #>    pt_id disease_assessment       start_time end_time #>    <chr> <chr>                         <dbl>    <dbl> #>  1 01    CR/CRi + B Cell Recovery       -2.8      0   #>  2 01    RD                              0        0.9 #>  3 01    CR/CRi + B Cell Aplasia         0.9      0   #>  4 01    CR/CRi + B Cell Aplasia         0        1.8 #>  5 01    CR/CRi + B Cell Recovery        1.8      2   #>  6 02    RD                             -2.8      0   #>  7 02    CRi                             0        0.2 #>  8 03    CR/CRi + B Cell Recovery       -2.4      0   #>  9 03    CR/CRi + B Cell Recovery        0        0.9 #> 10 03    CR/CRi + B Cell Aplasia         0.9      2.8 #> # ‚Ñπ 65 more rows library(ggplot2)  p <- ggplot() +   geom_swim_lane(     data = patient_data,     mapping = aes(       x = start_time,       xend = end_time,       y = pt_id,       color = disease_assessment     ),     linewidth = 3   )  p"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/ggswim.html","id":"adding-a-marker-layer-points","dir":"Articles","previous_headings":"","what":"Adding a Marker Layer: Points","title":"Getting Started with ggswim","text":"Now, let‚Äôs add marker layer first inspecting infusion_events end_study_events datasets: dataset much simpler, indicating time initial infusion (0), reinfusions point beyond 0 (patient ). also categorized label. glyph colour serve helpful specifiers add markers onto swimmer plot. Initial infusions aren‚Äôt part dataset since plot centered around , markers segments month 0 relatively meaningless. Next, let‚Äôs look end study events, .e.¬†events indicate patient left study various reasons. ‚Äôll notice dataset includes use emojis glyph. addition shapes symbols, ggswim supports use emojis rendering swimmer plots. issues arise rendering, may need check options settings ensure proper graphics device like ‚ÄúAGG‚Äù. ‚Äôs common encounter separate datasets wild, make lives much easier combine end_study_events infusion_events together since share roughly data structure markers exist timeline. Let‚Äôs now call geom_swim_marker() add events onto plot. , use geom_swim_marker()‚Äôs custom marker aes() parameter:  ‚Äôve successfully made swimmer plot lanes two different kinds marker layers! Notice even though lanes markers use color scale, separated legend output. Let‚Äôs take one step make use glyph colour columns specified.","code":"infusion_events #> # A tibble: 18 √ó 5 #>    pt_id time_from_initial_infusion label             glyph colour  #>    <chr>                      <dbl> <chr>             <chr> <chr>   #>  1 01                           1   First Reinfusion  ‚¨§     #999999 #>  2 02                           0   First Reinfusion  ‚¨§     #999999 #>  3 03                           2   First Reinfusion  ‚¨§     #999999 #>  4 03                           3   Second Reinfusion ‚¨§     #f57dc1 #>  5 04                           5   First Reinfusion  ‚¨§     #999999 #>  6 05                           2   First Reinfusion  ‚¨§     #999999 #>  7 05                           4.3 Second Reinfusion ‚¨§     #f57dc1 #>  8 06                           2   First Reinfusion  ‚¨§     #999999 #>  9 08                           1   First Reinfusion  ‚¨§     #999999 #> 10 08                           2.5 Second Reinfusion ‚¨§     #f57dc1 #> 11 09                           7   First Reinfusion  ‚¨§     #999999 #> 12 12                           6   First Reinfusion  ‚¨§     #999999 #> 13 13                           1   First Reinfusion  ‚¨§     #999999 #> 14 14                           0   First Reinfusion  ‚¨§     #999999 #> 15 15                           0   First Reinfusion  ‚¨§     #999999 #> 16 17                           1   First Reinfusion  ‚¨§     #999999 #> 17 18                           3   First Reinfusion  ‚¨§     #999999 #> 18 19                           4   First Reinfusion  ‚¨§     #999999 end_study_events #> # A tibble: 7 √ó 4 #>   pt_id time_from_initial_infusion label                     glyph #>   <chr>                      <dbl> <chr>                     <chr> #> 1 01                           2   Other End Study Reason    ‚ö†Ô∏è     #> 2 02                           0.2 Deceased                  ‚ùå    #> 3 03                          11.9 Completed Study Follow-Up ‚úÖ    #> 4 05                          14.1 Completed Study Follow-Up ‚úÖ    #> 5 06                           4.8 Other End Study Reason    ‚ö†Ô∏è     #> 6 08                          11.7 Other End Study Reason    ‚ö†Ô∏è     #> 7 12                           9.7 Other End Study Reason    ‚ö†Ô∏è all_events <- dplyr::bind_rows(   infusion_events,   end_study_events )  all_events #> # A tibble: 25 √ó 5 #>    pt_id time_from_initial_infusion label             glyph colour  #>    <chr>                      <dbl> <chr>             <chr> <chr>   #>  1 01                           1   First Reinfusion  ‚¨§     #999999 #>  2 02                           0   First Reinfusion  ‚¨§     #999999 #>  3 03                           2   First Reinfusion  ‚¨§     #999999 #>  4 03                           3   Second Reinfusion ‚¨§     #f57dc1 #>  5 04                           5   First Reinfusion  ‚¨§     #999999 #>  6 05                           2   First Reinfusion  ‚¨§     #999999 #>  7 05                           4.3 Second Reinfusion ‚¨§     #f57dc1 #>  8 06                           2   First Reinfusion  ‚¨§     #999999 #>  9 08                           1   First Reinfusion  ‚¨§     #999999 #> 10 08                           2.5 Second Reinfusion ‚¨§     #f57dc1 #> # ‚Ñπ 15 more rows p <- p +   geom_swim_marker(     data = all_events,     aes(       x = time_from_initial_infusion,       y = pt_id,       marker = label     ),     size = 4   )  p"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/ggswim.html","id":"a-sense-of-scale","dir":"Articles","previous_headings":"","what":"A Sense of Scale","title":"Getting Started with ggswim","text":"Scales unique component ggplot2 framework. information understanding work, encouraged read ‚ÄúScales‚Äù chapter ggplot2: Elegant Graphics Data Analysis. short, scales responsible connecting data aesthetics communicating connections elements like plot legend. scale_marker_discrete() makes easy specify take finer control markers appearance legend. Typically, can difficult emojis labels appear place legend glyphs. Let‚Äôs take look typical output using base ggplot2 geom_text():  geom_text() decent job, actually geom_swim_marker() wraps. However, ‚Äôs base level doesn‚Äôt quite set use glyphs way like see legend display. Additionally, glyphs don‚Äôt appear plot. try rework geom_point() geom_label(), still run issues scale assignment. pain point one foundational reasons made ggswim first place! Thanks ggswim can specify belongs glyph versus text elements legend. Additionally, able use ‚Äúcolour‚Äù scales marker definition ggswim can use colour scale hood, keep identity ‚Äúmarkers‚Äù ‚Äúlanes‚Äù separate output:","code":"ggplot() +   geom_text(     data = all_events,     aes(x = time_from_initial_infusion, y = pt_id, label = label, colour = glyph),     size = 4   ) p <- p +   scale_marker_discrete(     name = \"Study Events\",     glyphs = all_events$glyph,     colours = all_events$colour,     limits = all_events$label   )  p"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/ggswim.html","id":"a-full-swimmer-plot","dir":"Articles","previous_headings":"","what":"A Full Swimmer Plot","title":"Getting Started with ggswim","text":"mentioned README, ggplot2 techniques apply usual plots apply . , update lanes match nicer palette new name add plot labels:  can also apply theme_ggswim() function give additional beautification:","code":"library(ggplot2)  p <- p +   theme_minimal() +   scale_color_brewer(     name = \"Disease Assessments\",     palette = \"Set1\"   ) +   labs(title = \"My Swimmer Plot\") +   xlab(\"Time (Months)\") + ylab(\"Patient ID\")  p p +   theme_ggswim()"},{"path":"https://chop-cgtinformatics.github.io/ggswim/articles/ggswim.html","id":"additional-notes","dir":"Articles","previous_headings":"A Full Swimmer Plot","what":"Additional notes","title":"Getting Started with ggswim","text":"additional considerations keep mind working ggswim: Rendering Emojis Custom Shapes: ensure emojis custom shapes display correctly, users may need switch graphics rendering device AGG. ggswim supports use FontAwesome Bootstrap icons glyph definition addition shapes emojis. Check Gallery examples add plots!","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Hanna. Author, maintainer. Stephan Kadauke. Author. Ezra Porter. Author.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hanna R, Kadauke S, Porter E (2024). ggswim: Create Swimmer Plots ggplot2. R package version 0.1.0, https://github.com/CHOP-CGTInformatics/ggswim, https://chop-cgtinformatics.github.io/ggswim/.","code":"@Manual{,   title = {ggswim: Create Swimmer Plots with ggplot2},   author = {Richard Hanna and Stephan Kadauke and Ezra Porter},   year = {2024},   note = {R package version 0.1.0,     https://github.com/CHOP-CGTInformatics/ggswim},   url = {https://chop-cgtinformatics.github.io/ggswim/}, }"},{"path":"https://chop-cgtinformatics.github.io/ggswim/index.html","id":"ggswim-","dir":"","previous_headings":"","what":"Create swimmer plots with ggswim","title":"Create swimmer plots with ggswim","text":"ggswim package provides convenient set commands easily create swimmer plots. extension ggplot2, streamlines process generating legends effectively communicate events interest along subject response paths. ggswim solves headaches associated layer management ggplot2 organizing classifying data ‚Äúmarkers‚Äù ‚Äúlanes.‚Äù nothing changes data , way ‚Äôs presented winds much closer ‚Äôs expected communicate swimmer plot‚Äôs contents.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create swimmer plots with ggswim","text":"can install development version ggswim like :","code":"devtools::install_github(\"CHOP-CGTInformatics/ggswim\")"},{"path":"https://chop-cgtinformatics.github.io/ggswim/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create swimmer plots with ggswim","text":"help get started, ggswim includes three sample datasets: patient_data, infusion_events, end_study_events. de-identified datasets simulate real world data related infusions, disease assessments, study statuses clinical trial. ggswim offers several geom-functions, using geom_swim_lane() can set horizontal response paths swimmer plot, .e.¬†‚Äúlanes‚Äù. ‚Äôll also set corresponding arrows indicate subjects still trial:  Next ‚Äôll add events interest: end study updates infusions. ‚Äôll refer ‚Äúmarkers‚Äù call next main ‚Äúgeom‚Äù function: geom_swim_marker(). often common see datasets separate components wild, ‚Äôll make lives little easier plotting combining first.  looks OK default, ‚Äôs quite nice ‚Äôd like . Let‚Äôs specify particular glyphs colours ‚Äôd like use markers ggswim‚Äôs scale_marker_discrete().  Using custom marker aes() geom_swim_marker() combination specific scale definitions helps us keep markers lanes separate legend. Finally, ‚Äôll beautify plot familiar ggplot2 techniques last finishing touch theme_ggswim():","code":"library(ggswim) library(ggplot2)  # Construct arrow_data for arrow display later arrow_data <- patient_data |>   dplyr::left_join(     end_study_events |>       dplyr::select(pt_id, label),     by = \"pt_id\"   ) |>   dplyr::select(pt_id, end_time, label) |>   dplyr::filter(.by = pt_id, end_time == max(end_time)) |>   dplyr::filter(is.na(label)) |>   unique()  p <- patient_data |>   ggplot() +   geom_swim_lane(     mapping = aes(       x = start_time, y = pt_id, xend = end_time,       colour = disease_assessment     )   ) +   geom_swim_arrow(     data = arrow_data,     mapping = aes(xend = end_time, y = pt_id)   ) +   scale_colour_brewer(     name = \"Disease Assessments\",     palette = \"Set1\"   )  p all_events <- dplyr::bind_rows(   infusion_events,   end_study_events )  p <- p +   geom_swim_marker(     data = all_events,     aes(x = time_from_initial_infusion, y = pt_id, marker = label),     size = 5   )  p p <- p +   scale_marker_discrete(     glyphs = all_events$glyph,     colours = all_events$colour,     limits = all_events$label,     name = \"Study Events\"   )  p p +   scale_colour_brewer(name = \"Lanes\", palette = \"Set1\") +   labs(title = \"My Swimmer Plot\") +   xlab(\"Time Since Initial Infusion (Months)\") + ylab(\"Patient ID\") +   theme_ggswim()"},{"path":"https://chop-cgtinformatics.github.io/ggswim/index.html","id":"collaboration","dir":"","previous_headings":"","what":"Collaboration","title":"Create swimmer plots with ggswim","text":"invite give feedback collaborate us! familiar GitHub R packages, please feel free submit pull request. Please let us know ggswim fails whatever reason use case submit bug report creating GitHub issue. Please note project released Contributor Code Conduct. participating agree abide terms.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Bootstrap Unicode ‚Äî bootstrap","title":"Retrieve Bootstrap Unicode ‚Äî bootstrap","text":"Convert Bootstrap alias strings corresponding Unicode format. aliases prepended \"bs\".","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Bootstrap Unicode ‚Äî bootstrap","text":"","code":"bootstrap(aliases)"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Bootstrap Unicode ‚Äî bootstrap","text":"aliases string vector strings retrieve Unicode values .","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Bootstrap Unicode ‚Äî bootstrap","text":"named character vector Unicode values corresponding provided aliases. alias found, value NA.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Bootstrap Unicode ‚Äî bootstrap","text":"","code":"bootstrap(c(\"bs-car-front\", \"bs-heart\")) #> bs-car-front     bs-heart  #>          \"Ôü°\"          \"Ôêó\""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/dot-default_glyphs.html","id":null,"dir":"Reference","previous_headings":"","what":"ggswim marker defaults ‚Äî .default_glyphs","title":"ggswim marker defaults ‚Äî .default_glyphs","text":"ggswim marker defaults","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/dot-default_glyphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggswim marker defaults ‚Äî .default_glyphs","text":"","code":".default_glyphs  .default_colours  .default_limits"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/dot-default_glyphs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ggswim marker defaults ‚Äî .default_glyphs","text":"object class character length 9. object class character length 9. object class character length 9.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/dot-default_glyphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggswim marker defaults ‚Äî .default_glyphs","text":"","code":"ggswim::.default_glyphs #> [1] \"‚óè\" \"‚ñ†\" \"‚ñ≤\" \"‚¨•\" \"‚ñº\" \"‚ñ¢\" \"‚ñ°\" \"‚ñ≥\" \"‚óá\" ggswim::.default_colours #> [1] \"#E41A1C\" \"#377EB8\" \"#4DAF4A\" \"#984EA3\" \"#FF7F00\" \"#FFFF33\" \"#A65628\" #> [8] \"#F781BF\" \"#999999\" ggswim::.default_limits #> [1] \"val1\" \"val2\" \"val3\" \"val4\" \"val5\" \"val6\" \"val7\" \"val8\" \"val9\""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/end_study_events.html","id":null,"dir":"Reference","previous_headings":"","what":"End of Study Events dataset ‚Äî end_study_events","title":"End of Study Events dataset ‚Äî end_study_events","text":"datasets provide information patients, infusion events, end study events. Trial data de-identified randomized general use.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/end_study_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"End of Study Events dataset ‚Äî end_study_events","text":"","code":"data(end_study_events)"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/end_study_events.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"End of Study Events dataset ‚Äî end_study_events","text":"object class tbl_df (inherits tbl, data.frame) 7 rows 4 columns.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/end_study_events.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"End of Study Events dataset ‚Äî end_study_events","text":"dataset demonstration purposes .","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/end_study_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"End of Study Events dataset ‚Äî end_study_events","text":"end_study_events contains pre-formatted time series data related end study events patients left trial varying reasons. dataset applicable use geom_swim_marker().","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/end_study_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"End of Study Events dataset ‚Äî end_study_events","text":"","code":"end_study_events #> # A tibble: 7 √ó 4 #>   pt_id time_from_initial_infusion label                     glyph #>   <chr>                      <dbl> <chr>                     <chr> #> 1 01                           2   Other End Study Reason    ‚ö†Ô∏è     #> 2 02                           0.2 Deceased                  ‚ùå    #> 3 03                          11.9 Completed Study Follow-Up ‚úÖ    #> 4 05                          14.1 Completed Study Follow-Up ‚úÖ    #> 5 06                           4.8 Other End Study Reason    ‚ö†Ô∏è     #> 6 08                          11.7 Other End Study Reason    ‚ö†Ô∏è     #> 7 12                           9.7 Other End Study Reason    ‚ö†Ô∏è"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/fontawesome.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve FontAwesome Unicode ‚Äî fontawesome","title":"Retrieve FontAwesome Unicode ‚Äî fontawesome","text":"Convert FontAwesome alias strings corresponding Unicode format. aliases prepended \"fa\".","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/fontawesome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve FontAwesome Unicode ‚Äî fontawesome","text":"","code":"fontawesome(aliases, type = \"solid\")"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/fontawesome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve FontAwesome Unicode ‚Äî fontawesome","text":"aliases string vector strings retrieve Unicode values . type character string denoting FontAwesome library subset search. One \"solid\", \"regular\", \"brands\". Default \"solid\".","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/fontawesome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve FontAwesome Unicode ‚Äî fontawesome","text":"named character vector Unicode values corresponding provided aliases. alias found, value NA.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/fontawesome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve FontAwesome Unicode ‚Äî fontawesome","text":"","code":"fontawesome(c(\"fa-car\", \"fa-user\")) #>  fa-car fa-user  #>     \"ÔÜπ\"     \"ÔÄá\""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_arrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Add arrows to swimmer plot lanes ‚Äî geom_swim_arrow","title":"Add arrows to swimmer plot lanes ‚Äî geom_swim_arrow","text":"Arrows attached end swimmer plot lanes can used denote continuation events ongoing treatment, implying activity status extends beyond plotted period.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_arrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add arrows to swimmer plot lanes ‚Äî geom_swim_arrow","text":"","code":"geom_swim_arrow(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   arrow_colour = \"black\",   arrow_head_length = unit(0.25, \"inches\"),   arrow_neck_length = NULL,   arrow_fill = NULL,   arrow_type = \"closed\",   lineend = \"butt\",   linejoin = \"round\",   na.rm = FALSE,   show.legend = FALSE,   inherit.aes = TRUE )"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_arrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add arrows to swimmer plot lanes ‚Äî geom_swim_arrow","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data dataframe prepared use geom_swim_arrow(). Required. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position Position adjustment. ggswim accepts either \"stack\", \"identity\" depending use case. Default \"identity\". ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. arrow_colour colour arrow head arrow_head_length unit specifying length arrow head (tip base). arrow_neck_length Value specifying neck length end segment arrow head base arrow_fill fill colour arrow head arrow_type One \"open\" \"closed\" indicating whether arrow head closed triangle. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_arrow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add arrows to swimmer plot lanes ‚Äî geom_swim_arrow","text":"Please note geom_swim_arrow() requires data argument inherit data like functions.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_arrow.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Add arrows to swimmer plot lanes ‚Äî geom_swim_arrow","text":"geom_swim_arrow() understands following aesthetics (required aesthetics bold): y xend alpha colour group linetype linewidth geom_swim_arrow() wrapper geom_segment() can support much functionality.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_arrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add arrows to swimmer plot lanes ‚Äî geom_swim_arrow","text":"","code":"# Set up data for arrows arrow_data <- patient_data |>   dplyr::left_join(     end_study_events |>       dplyr::select(pt_id, label),     by = \"pt_id\"   ) |>   dplyr::select(pt_id, end_time, label) |>   dplyr::filter(.by = pt_id, end_time == max(end_time)) |>   dplyr::filter(!is.na(label)) |>   unique()  geom_swim_arrow(   data = arrow_data,   mapping = aes(xend = end_time, y = pt_id),   linewidth = .1,   arrow_neck_length = 5,   arrow_head_length = grid::unit(0.25, \"inches\"),   arrow_colour = \"slateblue\",   arrow_fill = \"cyan\" ) #> mapping: y = ~pt_id, xend = ~end_time  #> geom_swim_arrow: arrow.fill = cyan, arrow_colour = slateblue, arrow_head_length = 0.25, arrow_neck_length = 5, arrow_type = closed, lineend = butt, linejoin = round, na.rm = FALSE #> stat_identity: na.rm = FALSE #> position_identity"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_lane.html","id":null,"dir":"Reference","previous_headings":"","what":"Add lanes to swimmer plots ‚Äî geom_swim_lane","title":"Add lanes to swimmer plots ‚Äî geom_swim_lane","text":"Lanes swimmer plots represent individual subjects entities tracked time. lane horizontal track displays duration sequence events activities corresponding subject.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_lane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add lanes to swimmer plots ‚Äî geom_swim_lane","text":"","code":"geom_swim_lane(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   arrow = NULL,   arrow.fill = NULL,   lineend = \"butt\",   linejoin = \"round\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_lane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add lanes to swimmer plots ‚Äî geom_swim_lane","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data dataframe prepared use geom_swim_lane() stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. arrow specification arrow heads, created grid::arrow(). arrow.fill fill colour use arrow head (closed). NULL means use colour aesthetic. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_lane.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Add lanes to swimmer plots ‚Äî geom_swim_lane","text":"geom_swim_lane() understands following aesthetics (required aesthetics bold): x y xend alpha colour group linetype linewidth geom_swim_lane() wrapper geom_segment() supports much functionality.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_lane.html","id":"arrows","dir":"Reference","previous_headings":"","what":"Arrows","title":"Add lanes to swimmer plots ‚Äî geom_swim_lane","text":"Arrows can added ends swimmer plot lanes specified geom_swim_arrow().","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_lane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add lanes to swimmer plots ‚Äî geom_swim_lane","text":"","code":"patient_data |>   ggplot2::ggplot() +   geom_swim_lane(mapping = aes(     x = start_time, y = pt_id, xend = end_time,     colour = disease_assessment   ))"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_marker.html","id":null,"dir":"Reference","previous_headings":"","what":"Add markers to swimmer plots ‚Äî geom_swim_marker","title":"Add markers to swimmer plots ‚Äî geom_swim_marker","text":"Markers specific symbols indicators placed lanes swimmer plot denote particular events, milestones, statuses. provide additional contextual information significant occurrences timeline, treatment responses adverse events.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_marker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add markers to swimmer plots ‚Äî geom_swim_marker","text":"","code":"geom_swim_marker(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   check_overlap = FALSE,   size.unit = \"mm\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_marker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add markers to swimmer plots ‚Äî geom_swim_marker","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. jointy specified nudge_x nudge_y. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). string nameing position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. check_overlap TRUE, text overlaps previous text layer plotted. check_overlap happens draw time order data. Therefore data arranged label column calling geom_text(). Note argument supported geom_label(). size.unit size aesthetic interpreted: millimetres (\"mm\", default), points (\"pt\"), centimetres (\"cm\"), inches (\"\"), picas (\"pc\"). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/geom_swim_marker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add markers to swimmer plots ‚Äî geom_swim_marker","text":"","code":"if (FALSE) { # \\dontrun{ all_events <- dplyr::bind_rows(   infusion_events,   end_study_events )  ggplot2::ggplot() +   geom_swim_lane(     data = patient_data,     aes(x = start_time, xend = end_time, y = pt_id, colour = disease_assessment)   ) +   geom_swim_marker(     data = all_events,     aes(x = time_from_initial_infusion, y = pt_id, marker = label),     size = 10   ) } # }"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/ggswim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggswim: Create Swimmer Plots with ggplot2 ‚Äî ggswim-package","title":"ggswim: Create Swimmer Plots with ggplot2 ‚Äî ggswim-package","text":"Create swimmer plots using ggplot2 framework.","code":""},{"path":[]},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/ggswim-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggswim: Create Swimmer Plots with ggplot2 ‚Äî ggswim-package","text":"Maintainer: Richard Hanna richardshanna91@gmail.com (ORCID) Authors: Stephan Kadauke kadaukes@chop.edu (ORCID) Ezra Porter ezrajporter@gmail.com (ORCID)","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/infusion_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Infusion Events dataset ‚Äî infusion_events","title":"Infusion Events dataset ‚Äî infusion_events","text":"datasets provide information patients, infusion events, end study events. Trial data de-identified randomized general use.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/infusion_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infusion Events dataset ‚Äî infusion_events","text":"","code":"data(infusion_events)"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/infusion_events.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Infusion Events dataset ‚Äî infusion_events","text":"object class tbl_df (inherits tbl, data.frame) 18 rows 5 columns.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/infusion_events.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Infusion Events dataset ‚Äî infusion_events","text":"dataset demonstration purposes .","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/infusion_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infusion Events dataset ‚Äî infusion_events","text":"infusion_events contains pre-formatted time series data related infusions reinfusions patients patient_data. dataset applicable use geom_swim_marker().","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/infusion_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infusion Events dataset ‚Äî infusion_events","text":"","code":"infusion_events #> # A tibble: 18 √ó 5 #>    pt_id time_from_initial_infusion label             glyph colour  #>    <chr>                      <dbl> <chr>             <chr> <chr>   #>  1 01                           1   First Reinfusion  ‚¨§     #999999 #>  2 02                           0   First Reinfusion  ‚¨§     #999999 #>  3 03                           2   First Reinfusion  ‚¨§     #999999 #>  4 03                           3   Second Reinfusion ‚¨§     #f57dc1 #>  5 04                           5   First Reinfusion  ‚¨§     #999999 #>  6 05                           2   First Reinfusion  ‚¨§     #999999 #>  7 05                           4.3 Second Reinfusion ‚¨§     #f57dc1 #>  8 06                           2   First Reinfusion  ‚¨§     #999999 #>  9 08                           1   First Reinfusion  ‚¨§     #999999 #> 10 08                           2.5 Second Reinfusion ‚¨§     #f57dc1 #> 11 09                           7   First Reinfusion  ‚¨§     #999999 #> 12 12                           6   First Reinfusion  ‚¨§     #999999 #> 13 13                           1   First Reinfusion  ‚¨§     #999999 #> 14 14                           0   First Reinfusion  ‚¨§     #999999 #> 15 15                           0   First Reinfusion  ‚¨§     #999999 #> 16 17                           1   First Reinfusion  ‚¨§     #999999 #> 17 18                           3   First Reinfusion  ‚¨§     #999999 #> 18 19                           4   First Reinfusion  ‚¨§     #999999"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/patient_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Patient Data dataset ‚Äî patient_data","title":"Patient Data dataset ‚Äî patient_data","text":"datasets provide information patients, infusion events, end study events. Trial data de-identified randomized general use.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/patient_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Patient Data dataset ‚Äî patient_data","text":"","code":"data(patient_data)"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/patient_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Patient Data dataset ‚Äî patient_data","text":"object class tbl_df (inherits tbl, data.frame) 75 rows 4 columns.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/patient_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Patient Data dataset ‚Äî patient_data","text":"dataset demonstration purposes .","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/patient_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Patient Data dataset ‚Äî patient_data","text":"patient_data contains pre-formatted time series data related disease status markers status markers can support arrows. dataset applicable use geom_swim_lane().","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/patient_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Patient Data dataset ‚Äî patient_data","text":"","code":"patient_data #> # A tibble: 75 √ó 4 #>    pt_id disease_assessment       start_time end_time #>    <chr> <chr>                         <dbl>    <dbl> #>  1 01    CR/CRi + B Cell Recovery       -2.8      0   #>  2 01    RD                              0        0.9 #>  3 01    CR/CRi + B Cell Aplasia         0.9      0   #>  4 01    CR/CRi + B Cell Aplasia         0        1.8 #>  5 01    CR/CRi + B Cell Recovery        1.8      2   #>  6 02    RD                             -2.8      0   #>  7 02    CRi                             0        0.2 #>  8 03    CR/CRi + B Cell Recovery       -2.4      0   #>  9 03    CR/CRi + B Cell Recovery        0        0.9 #> 10 03    CR/CRi + B Cell Aplasia         0.9      2.8 #> # ‚Ñπ 65 more rows"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages ‚Äî reexports","title":"Objects exported from other packages ‚Äî reexports","text":"objects imported packages. Follow links see documentation. ggplot2 %+%, aes, ggsave grid grid.draw","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/scale_marker_discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Position scales for discrete marker data ‚Äî scale_marker_discrete","title":"Position scales for discrete marker data ‚Äî scale_marker_discrete","text":"scale_marker_discrete() used set discrete x aesthetics swimmer plot markers.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/scale_marker_discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position scales for discrete marker data ‚Äî scale_marker_discrete","text":"","code":"scale_marker_discrete(glyphs = NULL, colours = NULL, limits = NULL, ...)"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/scale_marker_discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position scales for discrete marker data ‚Äî scale_marker_discrete","text":"glyphs Marker glyphs passed marker layer, taking form emojis ASCII shapes. Default glyphs provided absence defined ones. colours Marker colours passed marker layer non-emojis. Default colours provided absence defined ones. limits One : NULL use default scale values character vector defines possible values scale order function accepts existing (automatic) values returns new ones. Also accepts rlang lambda function notation. ... Arguments passed discrete_scale palette palette function called single integer argument (number levels scale) returns values take (e.g., scales::pal_hue()). breaks One : NULL breaks waiver() default breaks (scale limits) character vector breaks function takes limits input returns breaks output. Also accepts rlang lambda function notation. limits One : NULL use default scale values character vector defines possible values scale order function accepts existing (automatic) values returns new ones. Also accepts rlang lambda function notation. drop unused factor levels omitted scale? default, TRUE, uses levels appear data; FALSE includes levels factor. Please note display every level legend, layer use show.legend = TRUE. na.translate Unlike continuous scales, discrete scales can easily show missing values, default. want remove missing values discrete scale, specify na.translate = FALSE. na.value na.translate = TRUE, aesthetic value missing values displayed ? apply position scales NA always placed far right. aesthetics names aesthetics scale works . labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. call call used construct scale reporting messages. super super class use constructed scale","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/scale_marker_discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Position scales for discrete marker data ‚Äî scale_marker_discrete","text":"","code":"if (FALSE) { # \\dontrun{ all_events <- dplyr::bind_rows(   infusion_events,   end_study_events )  ggplot2::ggplot() +   geom_swim_marker(     data = all_events,     aes(x = time_from_initial_infusion, y = pt_id, marker = label),     size = 5   ) +   scale_marker_discrete(     glyphs = all_events$glyph,     colours = all_events$colour,     limits = all_events$label   ) } # }"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_aliases.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility Function to Search Aliases Across Icon Libraries ‚Äî search_aliases","title":"Utility Function to Search Aliases Across Icon Libraries ‚Äî search_aliases","text":"generic function search aliases within specified icon libraries.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_aliases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility Function to Search Aliases Across Icon Libraries ‚Äî search_aliases","text":"","code":"search_aliases(   str = \"\",   dataset = c(\"FontAwesome\", \"Bootstrap\"),   type = \"solid\",   approximate = FALSE )"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_aliases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility Function to Search Aliases Across Icon Libraries ‚Äî search_aliases","text":"str character string alias search specified icon library. left empty (default \"\"), returns available aliases. dataset character string specifying icon library search. Supported values \"FontAwesome\" \"Bootstrap\". Default \"FontAwesome\". type FontAwesome dataset . Specifies subset search within. One \"solid\", \"regular\", \"brands\". Ignored datasets. Default \"solid\". approximate Logical. TRUE, performs approximate matching using agrep. FALSE (default), performs exact matching using grep.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_aliases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility Function to Search Aliases Across Icon Libraries ‚Äî search_aliases","text":"sorted character vector matching aliases.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for Bootstrap aliases to include in ggswim ‚Äî search_bootstrap","title":"Search for Bootstrap aliases to include in ggswim ‚Äî search_bootstrap","text":"Check strings available aliases Bootstrap icons.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for Bootstrap aliases to include in ggswim ‚Äî search_bootstrap","text":"","code":"search_bootstrap(str = \"\", approximate = FALSE)"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for Bootstrap aliases to include in ggswim ‚Äî search_bootstrap","text":"str character string alias search icon data available. left empty, default \"\", returns available aliases. approximate Use approximate exact matching, TRUE/FALSE. Default FALSE.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for Bootstrap aliases to include in ggswim ‚Äî search_bootstrap","text":"Matching aliases available Bootstrap data","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for Bootstrap aliases to include in ggswim ‚Äî search_bootstrap","text":"","code":"search_bootstrap(\"bs-car-front\") #> [1] \"bs-car-front\"      \"bs-car-front-fill\""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_fontawesome.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for FontAwesome aliases to include in ggswim ‚Äî search_fontawesome","title":"Search for FontAwesome aliases to include in ggswim ‚Äî search_fontawesome","text":"Check strings available aliases FontAwesome icons.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_fontawesome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for FontAwesome aliases to include in ggswim ‚Äî search_fontawesome","text":"","code":"search_fontawesome(str = \"\", type = \"solid\", approximate = FALSE)"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_fontawesome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for FontAwesome aliases to include in ggswim ‚Äî search_fontawesome","text":"str character string alias search icon data available. left empty, default \"\", returns available aliases. type character string denoting FontAwesome library search. One \"solid\", \"regular\", \"brands\". Default \"solid\". approximate Use approximate exact matching, TRUE/FALSE. Default FALSE.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_fontawesome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for FontAwesome aliases to include in ggswim ‚Äî search_fontawesome","text":"Matching aliases available FontAwesome data","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/search_fontawesome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for FontAwesome aliases to include in ggswim ‚Äî search_fontawesome","text":"","code":"search_fontawesome(\"fa-car\") #>  [1] \"fa-car\"                   \"fa-car-battery\"           #>  [3] \"fa-car-burst\"             \"fa-car-on\"                #>  [5] \"fa-car-rear\"              \"fa-car-side\"              #>  [7] \"fa-car-tunnel\"            \"fa-caravan\"               #>  [9] \"fa-caret-down\"            \"fa-caret-left\"            #> [11] \"fa-caret-right\"           \"fa-caret-up\"              #> [13] \"fa-carrot\"                \"fa-cart-arrow-down\"       #> [15] \"fa-cart-flatbed\"          \"fa-cart-flatbed-suitcase\" #> [17] \"fa-cart-plus\"             \"fa-cart-shopping\""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/theme_ggswim.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply custom theme styling for ggplot2 plots ‚Äî theme_ggswim","title":"Apply custom theme styling for ggplot2 plots ‚Äî theme_ggswim","text":"function applies custom styling various elements ggplot2 plots, including title, subtitle, caption, axis text, axis titles, legend text legend titles.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/theme_ggswim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply custom theme styling for ggplot2 plots ‚Äî theme_ggswim","text":"","code":"theme_ggswim(base_size = 12, base_family = \"\")  theme_ggswim_dark(base_size = 12, base_family = \"\")"},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/theme_ggswim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply custom theme styling for ggplot2 plots ‚Äî theme_ggswim","text":"base_size base font size use plot elements. Default 12. base_family base font family use plot elements. Default \"\".","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/theme_ggswim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply custom theme styling for ggplot2 plots ‚Äî theme_ggswim","text":"ggplot2 theme object.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/theme_ggswim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply custom theme styling for ggplot2 plots ‚Äî theme_ggswim","text":"function builds upon theme_minimal() function ggplot2 overrides specific theme elements provide customized look feel plots.","code":""},{"path":"https://chop-cgtinformatics.github.io/ggswim/reference/theme_ggswim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply custom theme styling for ggplot2 plots ‚Äî theme_ggswim","text":"","code":"p <- ggplot2::ggplot() +   geom_swim_lane(     data = patient_data,     mapping = aes(       x = start_time,       xend = end_time,       y = pt_id,       colour = disease_assessment     ),     linewidth = 3   )  p +   theme_ggswim()   p +   theme_ggswim_dark()"}]
